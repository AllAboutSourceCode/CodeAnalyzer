proc timeDifference toDate fromDate #18 2 36 2
rcall getTime getTime_1  fromDate#20 34 20 51
rcall getTime getTime_2  toDate#20 15 20 30
assign diff  getTime_1 getTime_2#20 15 20 51
assign diffSeconds  diff#22 22 22 37
assign diffMinutes   diff#23 22 23 44
assign diffHours   diff#24 20 24 47
assign diffDays   diff#25 19 25 46
assign timeDiff  diffSeconds diffMinutes diffHours diffDays#27 21 28 60
call print   diffDays #30 3 30 40
call print   diffHours #31 3 31 42
call print   diffMinutes #32 3 32 46
call print   diffSeconds #33 3 33 45
return timeDiff#35 10 35 17
proc getStudentAssignmentInstructions courseID assignID user #40 2 206 2
assign end#43 19 43 22
assign defaultSchemaId#44 25 44 25
assign assignmentType#45 27 45 28
assign assignmentName#46 27 46 30
assign instructions#47 25 47 26
rcall equals equals_1  user#49 6 49 25
if equals_1#49 6 49 25
{
assign instructions instructions#50 20 50 104
}
assign instructions instructions  assignID#53 19 54 20
rcall equals equals_2  user#55 6 55 25
if equals_2#55 6 55 25
{
assign instructions instructions#56 20 56 26
}
try#59 68 203 3
{
rcall dbConnection dbcon  #59 26 59 66
try#62 96 202 4
{
rcall prepareStatement stmt  dbcon#61 33 62 94
call setInt  assignID stmt#63 4 63 27
call setString  courseID stmt#64 4 64 30
try#65 43 201 4
{
rcall executeQuery rs  stmt#65 23 65 41
rcall next next_5  rs#66 8 66 16
if next_5#66 8 66 16
{
rcall getTimestamp end  rs#67 11 67 36
rcall getBoolean getBoolean_6  rs#68 10 68 39
if getBoolean_6#68 10 68 39
{
assign assignmentType#69 21 69 35
}
else#71 9 71 9
{
assign assignmentType#72 21 72 34
}
rcall getInt defaultSchemaId  rs#75 23 75 50
rcall getString assignmentName  rs#76 22 76 51
rcall equals equals_7  user#77 9 77 28
if equals_7#77 8 77 28
{
assign instructions instructions#78 22 78 30
}
else#79 10 79 10
{
}
rcall equals equals_8  user#82 8 82 27
if equals_8#82 8 82 27
{
assign instructions instructions#83 22 83 84
}
assign instructions instructions  assignmentName#85 21 86 39
rcall equals equals_9  user#87 8 87 27
if equals_9#87 8 87 27
{
assign instructions instructions#88 22 88 28
}
rcall equals equals_10  user#90 9 90 28
if equals_10#90 8 90 28
{
assign instructions instructions#91 22 91 30
}
else#92 10 92 10
{
assign instructions instructions#94 22 94 84
}
assign instructions instructions  assignmentType#96 21 97 39
rcall equals equals_11  user#98 8 98 27
if equals_11#98 8 98 27
{
assign instructions instructions#99 22 99 98
}
try#103 103 115 5
{
rcall prepareStatement stmt1  dbcon#102 35 103 101
call setInt  defaultSchemaId stmt1#104 5 104 36
call setString  courseID stmt1#105 5 105 32
try#106 46 114 5
{
rcall executeQuery rs1  stmt1#106 25 106 44
rcall next next_14  rs1#107 10 107 19
if next_14#107 10 107 19
{
assign instructions instructions#108 23 108 119
rcall getString getString_15  rs1#111 11 111 38
assign instructions instructions  getString_15 defaultSchemaId#109 23 112 28
}
}
}
rcall equals equals_16  user#117 9 117 28
if equals_16#117 8 117 28
{
assign instructions instructions#118 22 118 30
}
else#120 9 120 9
{
assign instructions instructions#121 22 121 89
}
try#124 122 173 4
{
rcall prepareStatement stmt1  dbcon#123 35 124 120
call setInt  defaultSchemaId stmt1#125 6 125 37
call setString  courseID stmt1#126 6 126 33
try#127 47 134 6
{
rcall executeQuery rs1  stmt1#127 26 127 45
rcall next next_19  rs1#128 11 128 20
if next_19#128 11 128 20
{
assign instructions instructions #129 24 130 32
rcall getString getString_20  rs1#132 83 132 115
rcall getString getString_21  rs1#132 45 132 74
assign instructions instructions  getString_20 getString_21 defaultSchemaId#131 24 132 158
}
}
rcall equals equals_22  user#135 9 135 28
if equals_22#135 9 135 28
{
assign instructions instructions#136 23 136 42
}
rcall equals equals_23  user#138 10 138 29
if equals_23#138 9 138 29
{
assign gson #140 20 140 29
rcall getType listType  #141 24 141 61
rcall getString getString_25  rs#143 53 143 81
rcall equalsIgnoreCase equalsIgnoreCase_24  getString_25#143 53 143 106
rcall getString getString_26  rs#143 13 143 41
rcall getString getString_27  rs#142 13 142 41
if   equalsIgnoreCase_24 getString_26 getString_27#142 13 143 107
{
rcall getString getString_28  rs#144 63 144 91
rcall fromJson dsList  getString_28 listType #144 43 144 102
assign instructions instructions #146 26 147 33
if  dsList.length dsList#150 13 150 48
{
assign i#151 36 151 36
loop  dsList.length i#151 38 151 52
{
try#152 68 161 27
{
rcall executeQuery rs2  stmt1#152 47 152 66
rcall next next_29  rs2#153 34 153 43
loop next_29#153 28 160 28
{
rcall getString getString_31  rs2#154 32 154 61
rcall equalsIgnoreCase equalsIgnoreCase_30   dsList i getString_31#154 32 154 89
if equalsIgnoreCase_30#154 32 154 89
{
rcall getString sampleDataName  rs2#155 54 155 86
rcall getString getString_32  rs2#157 106 157 138
rcall getString getString_33  rs2#157 68 157 97
assign instructions instructions  getString_32 getString_33 defaultSchemaId#156 48 157 173
}
}
}
assign i i#151 54 151 54
}
assign instructions instructions#163 42 163 51
}
else#165 14 165 14
{
assign instructions instructions#166 27 166 64
}
}
}
}
rcall equals equals_34  user#174 9 174 28
if equals_34#174 8 174 28
{
assign formatter  #176 35 177 29
call setLenient  formatter#178 6 178 32
rcall format ending  end formatter#179 22 179 42
rcall parse oldDate  ending formatter#180 31 180 53
rcall getInstance c  Calendar#182 19 182 40
rcall getTime getTime_36  c#183 44 183 54
rcall format currentDate  getTime_36 formatter#183 27 183 55
rcall parse current  currentDate formatter#184 31 184 58
rcall compareTo compareTo_37  oldDate current#186 10 186 35
if  compareTo_37#186 10 186 40
{
assign util #188 30 188 50
rcall timeDifference dueTime  current oldDate util#189 24 189 60
assign instructions instructions  end#190 24 190 130
assign instructions instructions  dueTime#191 23 192 38
}
else#193 13 193 13
{
assign instructions instructions  end#194 23 195 29
}
}
}
}
}
}
return instructions#205 11 205 22
proc getTesterAssignmentInstructions courseID assignID #209 2 307 2
assign end#211 19 211 22
assign defaultSchemaId#212 25 212 25
assign assignmentName#213 27 213 30
assign assignmentType#214 25 214 26
assign instructions  assignID#215 25 216 22
try#217 68 305 4
{
rcall dbConnection dbcon  #217 26 217 66
try#220 97 304 4
{
rcall prepareStatement stmt  dbcon#219 33 220 95
call setInt  assignID stmt#221 5 221 28
call setString  courseID stmt#222 5 222 31
try#223 44 303 6
{
rcall executeQuery rs  stmt#223 24 223 42
rcall next next_3  rs#224 10 224 18
if next_3#224 10 224 18
{
rcall getInt defaultSchemaId  rs#226 25 226 52
rcall getString assignmentName  rs#228 24 228 53
assign instructions instructions  assignmentName#229 23 230 41
try#234 105 247 7
{
rcall prepareStatement stmt1  dbcon#233 36 234 103
call setInt  defaultSchemaId stmt1#235 8 235 39
call setString  courseID stmt1#236 8 236 35
try#237 49 246 8
{
rcall executeQuery rs1  stmt1#237 28 237 47
rcall next next_6  rs1#238 13 238 22
if next_6#238 13 238 22
{
assign instructions instructions #239 26 241 34
rcall getString getString_7  rs1#244 20 244 47
assign instructions instructions  getString_7 defaultSchemaId#242 26 244 91
}
}
}
try#251 124 301 7
{
rcall prepareStatement stmt1  dbcon#250 37 251 122
call setInt  defaultSchemaId stmt1#252 8 252 39
call setString  courseID stmt1#253 8 253 35
try#255 49 263 8
{
rcall executeQuery rs1  stmt1#255 28 255 47
rcall next next_10  rs1#256 13 256 22
if next_10#256 13 256 22
{
assign instructions instructions #257 26 259 34
rcall getString getString_11  rs1#261 85 261 117
rcall getString getString_12  rs1#261 47 261 76
assign instructions instructions  getString_11 getString_12 defaultSchemaId#260 26 261 160
}
}
assign gson #267 22 267 31
rcall getType listType  #268 26 268 63
rcall getString getString_14  rs#270 55 270 83
rcall equalsIgnoreCase equalsIgnoreCase_13  getString_14#270 55 270 108
rcall getString getString_15  rs#270 15 270 43
rcall getString getString_16  rs#269 15 269 43
if   equalsIgnoreCase_13 getString_15 getString_16#269 15 270 109
{
rcall getString getString_17  rs#271 65 271 93
rcall fromJson dsList  getString_17 listType #271 45 271 104
assign instructions instructions #273 28 275 35
if  dsList.length dsList#277 15 277 50
{
assign i#278 38 278 38
loop  dsList.length i#278 40 278 54
{
try#279 70 289 29
{
rcall executeQuery rs2  stmt1#279 49 279 68
rcall next next_18  rs2#280 36 280 45
loop next_18#280 30 287 30
{
rcall getString getString_20  rs2#281 34 281 63
rcall equalsIgnoreCase equalsIgnoreCase_19   dsList i getString_20#281 34 281 91
if equalsIgnoreCase_19#281 34 281 91
{
rcall getString sampleDataName  rs2#282 56 282 88
rcall getString getString_21  rs2#284 108 284 140
rcall getString getString_22  rs2#284 70 284 99
assign instructions instructions  getString_21 getString_22 defaultSchemaId#283 50 284 175
}
}
}
assign i i#278 56 278 56
}
assign instructions instructions#291 44 291 77
}
else#293 16 293 16
{
assign instructions instructions#294 29 294 66
}
}
}
}
}
}
}
return instructions#306 10 306 21
proc encodeHTML s #316 2 327 2
assign out #317 22 317 39
assign i#318 16 318 16
rcall length length_1  s#318 23 318 32
loop  length_1 i#318 19 318 32
{
rcall charAt c  i s#319 13 319 23
if  c c c c#320 8 320 50
{
call append   c out#321 5 321 36
}
else#322 11 322 11
{
call append  c out#323 5 323 17
}
assign i i#318 35 318 35
}
rcall toString toString_4  out#326 10 326 23
return toString_4#326 10 326 23
proc decodeURIComponent s #338 2 357 2
if  s#339 7 339 15
{
invar#340 11 340 14
}
assign result#343 19 343 22
try#345 7 349 3
{
rcall replaceAll s  s#346 8 346 49
rcall replaceAll s  s#347 8 347 33
rcall decode result  s URLDecoder#348 13 348 41
}
catch #351 3 354 3
{
assign e#351 3 354 3
assign result s#352 13 352 13
}
return result#356 10 356 15
proc encodeURIComponent s #368 2 381 2
assign result#369 19 369 22
try#371 7 373 3
{
rcall encode result  s URLEncoder#372 13 372 41
}
catch #376 3 378 3
{
assign e#376 3 378 3
assign result s#377 13 377 13
}
return result#380 10 380 15
